#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function setupDatabase() {
  console.log('🚀 AgentHub Database Setup\n');
  console.log('This script will help you configure your database settings.\n');

  // Check if .env file exists
  const envPath = path.join(process.cwd(), '.env');
  const envExists = fs.existsSync(envPath);

  if (envExists) {
    const overwrite = await question('A .env file already exists. Overwrite it? (y/N): ');
    if (overwrite.toLowerCase() !== 'y') {
      console.log('Setup cancelled.');
      rl.close();
      return;
    }
  }

  console.log('📋 Database Configuration\n');

  // Environment selection
  console.log('Select your environment:');
  console.log('1. Development (with sample data and query logging)');
  console.log('2. Staging (no sample data, moderate logging)');
  console.log('3. Production (optimized for performance)');
  console.log('4. Custom (configure manually)\n');

  const envChoice = await question('Choose environment (1-4): ');

  let config = {};

  switch (envChoice) {
    case '1':
      config = {
        ENABLE_SAMPLE_DATA: 'true',
        LOG_BIGQUERY_QUERIES: 'true',
        BIGQUERY_TIMEOUT: '30000',
        BIGQUERY_RETRIES: '3'
      };
      break;
    case '2':
      config = {
        ENABLE_SAMPLE_DATA: 'false',
        LOG_BIGQUERY_QUERIES: 'false',
        BIGQUERY_TIMEOUT: '30000',
        BIGQUERY_RETRIES: '3'
      };
      break;
    case '3':
      config = {
        ENABLE_SAMPLE_DATA: 'false',
        LOG_BIGQUERY_QUERIES: 'false',
        BIGQUERY_TIMEOUT: '60000',
        BIGQUERY_RETRIES: '5'
      };
      break;
    case '4':
      // Custom configuration handled below
      break;
    default:
      console.log('Invalid choice. Using development defaults.');
      config = {
        ENABLE_SAMPLE_DATA: 'true',
        LOG_BIGQUERY_QUERIES: 'true'
      };
  }

  // Core settings
  console.log('\n📊 BigQuery Configuration\n');
  
  const projectId = await question('Enter your Google Cloud Project ID: ');
  if (!projectId.trim()) {
    console.log('❌ Project ID is required. Setup cancelled.');
    rl.close();
    return;
  }
  config.GOOGLE_CLOUD_PROJECT_ID = projectId.trim();

  const dataset = await question('Dataset name (default: agenthub): ');
  config.BIGQUERY_DATASET = dataset.trim() || 'agenthub';

  const location = await question('BigQuery location (default: US): ');
  config.BIGQUERY_LOCATION = location.trim() || 'US';

  const keyFile = await question('Path to service account key file (optional): ');
  if (keyFile.trim()) {
    config.GOOGLE_CLOUD_KEY_FILE = keyFile.trim();
  }

  // Custom configuration
  if (envChoice === '4') {
    console.log('\n⚙️  Advanced Configuration\n');
    
    const agentsTable = await question('Agents table name (default: agents): ');
    config.AGENTS_TABLE_NAME = agentsTable.trim() || 'agents';

    const conversationsTable = await question('Conversations table name (default: conversations): ');
    config.CONVERSATIONS_TABLE_NAME = conversationsTable.trim() || 'conversations';

    const timeout = await question('Query timeout in ms (default: 30000): ');
    config.BIGQUERY_TIMEOUT = timeout.trim() || '30000';

    const retries = await question('Max retries (default: 3): ');
    config.BIGQUERY_RETRIES = retries.trim() || '3';

    const sampleData = await question('Enable sample data? (y/N): ');
    config.ENABLE_SAMPLE_DATA = sampleData.toLowerCase() === 'y' ? 'true' : 'false';

    const logQueries = await question('Log queries for debugging? (y/N): ');
    config.LOG_BIGQUERY_QUERIES = logQueries.toLowerCase() === 'y' ? 'true' : 'false';
  }

  // Generate .env file
  let envContent = '# AgentHub Database Configuration\n';
  envContent += '# Generated by setup script\n\n';

  Object.entries(config).forEach(([key, value]) => {
    envContent += `${key}=${value}\n`;
  });

  fs.writeFileSync(envPath, envContent);

  console.log('\n✅ Configuration saved to .env file');
  console.log('\n📋 Next Steps:');
  console.log('1. Ensure BigQuery API is enabled in your Google Cloud project');
  console.log('2. Set up authentication (service account key or gcloud auth)');
  console.log('3. Restart your application to apply the new settings');
  
  if (config.GOOGLE_CLOUD_KEY_FILE) {
    console.log(`4. Make sure the key file exists at: ${config.GOOGLE_CLOUD_KEY_FILE}`);
  } else {
    console.log('4. Ensure Application Default Credentials are configured');
  }

  console.log('\n🎉 Database setup complete!');
  
  rl.close();
}

// Error handling
process.on('SIGINT', () => {
  console.log('\n\nSetup cancelled.');
  rl.close();
  process.exit(0);
});

setupDatabase().catch(console.error);